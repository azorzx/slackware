==========
LAMP HOWTO (c) Nicolas Kovacs <info@microlinux.fr>
==========

Dernière révision : 3 février 2013

Ce HOWTO décrit la configuration d'un serveur LAMP (Linux/Apache/MySQL/PHP) sur
une machine tournant sous Slackware. 

  * Introduction
  * Prérequis
  * Tester Apache
  * Configuration de base
  * Héberger un site web statique
  * Activer le support des scripts CGI
  * Héberger plusieurs sites sur un même serveur
  * Utiliser les scripts CGI avec les hôtes virtuels
  * Héberger des sites dynamiques avec PHP
  * Utiliser MySQL à partir de PHP
  * Le protocole HTTPS
  * Générer un certificat auto-signé
  * Configurer Apache et SSL
  * Plusieurs hébergements SSL sur un même serveur


Introduction
------------

Apache est le principal serveur web du monde de l'Open Source. D'après les
statistiques de Netcraft (http://netcraft.com), plus de la moitié des sites web
du monde tournent sur un serveur Apache. 

Une installation typique d'Apache est généralement constituée d'un assemblage
cohérent de paquets : 

  * le serveur Apache à proprement parler ;
  * des bibliothèques diverses et variées ;
  * des plug-ins ;
  * des langages de programmation ;
  * etc.

Ce HOWTO est basé sur les paquets 'httpd' (Apache), 'mysql' et 'php', contenus
dans une installation standard de Slackware.


Prérequis
---------

Apache utilise le port 80 en TCP pour le protocole HTTP. Il faudra donc songer
à ouvrir ce port dans le pare-feu. 


Tester Apache
-------------

Activer et démarrer Apache :

  # chmod +x /etc/rc.d/rc.httpd
  # /etc/rc.d/rc.httpd start

Tester le bon fonctionnement du serveur :

  # links http://localhost

On doit voir quelque chose de ce genre :

  =======================
        It works!


  =======================

Dans le réseau local, ouvrir l'adresse IP du serveur avec un navigateur, par
exemple :

  * http://192.168.2.3

On peut également invoquer le nom d'hôte :

  * http://bernadette

Ou encore :

  * http://bernadette.microlinux.montpezat


Configuration de base
---------------------

Le principal fichier de configuration d'Apache, c'est '/etc/httpd/httpd.conf'.
Avant d'éditer ce fichier, on va en faire une copie :

  # cd /etc/httpd
  # cp httpd.conf httpd.conf.orig

On peut déjà renseigner quelques directives :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
ServerAdmin info@microlinux.fr
...
ServerName bernadette.microlinux.montpezat:80
--8<--------------------------------------------------------------------------

  > L'adresse mail de l'administrateur apparaîtra sur certaines pages générées
    par le serveur, notamment les pages d'erreur.

  > Le nom du serveur peut être déterminé automatiquement, mais il vaut mieux
    le spécifier explicitement. 
    
Dans le cas où l'hôte n'a pas de nom de domaine enregistré, on peut fournir
l'adresse IP à la place :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
ServerName 213.41.252.141:80
...
--8<--------------------------------------------------------------------------


Héberger un site web statique
-----------------------------

Apache est immédiatement utilisable dans sa configuration par défaut. Le
serveur affiche le contenu du répertoire '/var/www/htdocs', défini par la
directive 'DocumentRoot' dans le fichier '/etc/httpd/httpd.conf' :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
DocumentRoot "/srv/httpd/htdocs"
...
--8<--------------------------------------------------------------------------

Notons que '/srv/httpd' est un lien symbolique qui pointe vers '/var/www' :

  # ls -l /srv/httpd
  lrwxrwxrwx 1 root root 8 nov.   9 07:53 /srv/httpd -> /var/www

Pour avoir quelque chose à nous mettre sous la dent, on va ranger la page par
défaut à un autre endroit pour la remplacer par un "vrai" site web statique. On
choisira la documentation de Slackware, qui vient sous forme d'une série de
pages HTML statiques.

Sauvegarder les fichiers fournis par défaut comme ceci, par exemple :

  # cd /var/www/htdocs/
  # ls
  htdig  index.html  manual
  # mkdir /root/htdocs_backup
  htdig  index.html  manual
  # mv -v * /root/htdocs_backup/
  « htdig » -> « /root/htdocs_backup/htdig »
  « index.html » -> « /root/htdocs_backup/index.html »
  « manual » -> « /root/htdocs_backup/manual »

Ensuite, récupérer la documentation de Slackware. L'outil 'wget' est utilisé
ici comme aspirateur de site :

  # wget -r -np -nH --cut-dirs=1 http://www.slackbook.org/html/

Éventuellement, assainir les permissions :

  # find . -type d -exec chmod 0755 \{} \;
  # find . -type f -exec chmod 0644 \{} \;

Le serveur Apache tourne avec les droits de l'utilisateur 'apache' et du groupe
'apache' :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
User apache
Group apache
...
--8<--------------------------------------------------------------------------

On va donc attribuer toutes les pages de notre site local à cet utilisateur et
à ce groupe :

  # chown -R apache:apache /var/www/htdocs

À présent, on peut ouvrir le site dans un navigateur (Firefox, Links, Lynx) et
apprécier le résultat.


Activer le support des scripts CGI
----------------------------------

CGI ("Common Gateway Interface") est une manière simple d'ajouter du contenu
dynamique à un site web. Apache doit être configuré pour autoriser l'exécution
des programmes CGI.

Éditer '/etc/httpd/httpd.conf' et décommenter la ligne relative au chargement
du module 'mod_cgi' :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
LoadModule cgi_module lib/httpd/modules/mod_cgi.so
...
--8<--------------------------------------------------------------------------

Redémarrer Apache pour prendre en compte le chargement du module :

  # /etc/rc.d/rc.httpd restart

La directive 'ScriptAlias' indique à Apache qu'un répertoire particulier est
dédié aux programmes CGI. Apache considérera que tout fichier situé dans ce
répertoire est un programme CGI et tentera de l'exécuter lorsque cette
ressource fera l'objet d'une requête client :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
<IfModule alias_module>
    ScriptAlias /cgi-bin/ "/srv/httpd/cgi-bin/"
</IfModule>
...
--8<--------------------------------------------------------------------------

Régler les permissions :

  # chown -R apache:apache /var/www/cgi-bin

Le répertoire 'cgi-bin' contient un fichier 'test-cgi'. Pour l'utiliser, il
faut d'abord indiquer l'interpréteur correct, en éditant la première ligne
comme ceci :

--8<--------------------------------------------------------------------------
#!/bin/sh
...
--8<--------------------------------------------------------------------------

Activer le script :

  # chmod +x test-cgi

Afficher la page du script :

  # links http://localhost/cgi-bin/test-cgi
  CGI/1.0 test script report:
  argc is 0. argv is .
  SERVER_SOFTWARE = Apache/2.4.3 (Unix) PHP/5.4.7
  SERVER_NAME = localhost
  GATEWAY_INTERFACE = CGI/1.1
  SERVER_PROTOCOL = HTTP/1.0
  SERVER_PORT = 80
  REQUEST_METHOD = GET
  ...


Héberger plusieurs sites sur un même serveur
--------------------------------------------

Le principe des serveurs virtuels ("virtual hosts") consiste à faire
fonctionner un ou plusieurs sites Web sur une même machine. L'utilisateur final
ne perçoit pas qu'en fait il s'agit d'un même serveur physique. 

Dans un premier temps, on va renommer le répertoire '/var/www/htdocs' en
'/var/www/vhosts' :

  # cd /var/www
  # mv htdocs vhosts

Il faudra modifier 'httpd.conf' pour prendre en compte ce changement :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
DocumentRoot "/srv/httpd/vhosts"
<Directory "/srv/httpd/vhosts">
...
--8<--------------------------------------------------------------------------

On va déplacer le site existant dans un nouveau répertoire :

  # cd vhosts
  # mkdir -pv ../slackware/htdocs
  mkdir: création du répertoire « ../slackware »
  mkdir: création du répertoire « ../slackware/htdocs »
  # mv * ../slackware/htdocs/
  # mv ../slackware/ .

Ensuite, on va créer un autre répertoire, dans lequel on va télécharger un
autre site, en l'occurrence la documentation de FreeBSD :

  # mkdir -pv freebsd/htdocs
  mkdir: création du répertoire « freebsd »
  mkdir: création du répertoire « freebsd/htdocs »
  # cd freebsd/htdocs
  # wget -r -p -np -nH --cut-dirs=4 \
      http://www.freebsd.org/doc/fr_FR.ISO8859-1/books/handbook/

Enfin, on va rétablir l'ancienne page 'index.html' à un endroit approprié :

  # cd /var/www/vhosts
  # mkdir -pv default/htdocs
  mkdir: création du répertoire « default »
  mkdir: création du répertoire « default/htdocs »
  # mv -v /root/htdocs_backup/index.html default/htdocs/
  « /root/htdocs_backup/index.html » -> « default/htdocs/index.html »

Au total, on a donc :

  # ls -l
  total 20
  drwxr-xr-x  2 root root  4096 févr.  3 10:14 default
  drwxr-xr-x  9 root root 12288 févr.  3 10:05 freebsd
  drwxr-xr-x 11 root root  4096 févr.  3 09:51 slackware

On va définir les permissions à la louche :

  # chown -R apache:apache *

Éditer le fichier '/etc/httpd/extra/httpd-vhosts.conf'. On pourra utiliser une
des deux stances fournies en exemple comme modèle. Dans un premier temps,
définir le site affiché par défaut, c'est-à-dire lorsqu'on invoque l'adresse IP
ou le nom d'hôte de la machine :

--8<---------- /etc/httpd/extra/httpd-vhosts.conf ----------------------------
<VirtualHost *:80>
    ServerAdmin info@microlinux.fr
    DocumentRoot "/srv/httpd/vhosts/default/htdocs"
    ServerName bernadette.microlinux.montpezat
    ServerAlias bernadette
    ErrorLog "/var/log/httpd/default-error_log"
    CustomLog "/var/log/httpd/default-access_log" common
</VirtualHost>
--8<--------------------------------------------------------------------------

  > Une erreur à ne pas commettre, c'est d'indiquer le chemin "réel" vers les
    pages Web pour 'DocumentRoot', c'est-à-dire "/var/www/htdocs/default" au
    lieu de "/srv/httpd/htdocs/default". Le chemin doit coïncider avec celui
    que l'on a défini dans '/etc/httpd/httpd.conf' pour 'DocumentRoot".

Pour activer les hôtes virtuels, il faut inclure le module en décommentant la
ligne correspondante dans '/etc/httpd/httpd.conf' :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
# Virtual hosts
Include /etc/httpd/extra/httpd-vhosts.conf
...
--8<--------------------------------------------------------------------------

Redémarrer Apache pour prendre en compte les modifications :

  # /etc/rc.d/rc.httpd restart|graceful

Vérifier si la page par défaut du serveur s'affiche bien :

  # links http://bernadette

À présent, nous pouvons ajouter les deux autres sites :

--8<---------- /etc/httpd/extra/httpd-vhosts.conf ----------------------------
# Page par défaut du serveur
<VirtualHost *:80>
    ServerAdmin info@microlinux.fr
    DocumentRoot "/srv/httpd/vhosts/default/htdocs"
    ServerName bernadette.microlinux.montpezat
    ServerAlias bernadette
    ErrorLog "/var/log/httpd/default-error_log"
    CustomLog "/var/log/httpd/default-access_log" common
</VirtualHost>

# Documentation de Slackware
<VirtualHost *:80>
    ServerAdmin info@microlinux.fr
    DocumentRoot "/srv/httpd/vhosts/slackware/htdocs"
    ServerName slackware.bernadette.microlinux.montpezat
    ServerAlias slackware.bernadette
    ErrorLog "/var/log/httpd/slackware-error_log"
    CustomLog "/var/log/httpd/slackware-access_log" common
</VirtualHost>

# Documentation de FreeBSD
<VirtualHost *:80>
    ServerAdmin info@microlinux.fr
    DocumentRoot "/srv/httpd/vhosts/freebsd/htdocs"
    ServerName freebsd.bernadette.microlinux.montpezat
    ServerAlias freebsd.bernadette
    ErrorLog "/var/log/httpd/freebsd-error_log"
    CustomLog "/var/log/httpd/freebsd-access_log" common
</VirtualHost>
--8<--------------------------------------------------------------------------

Pour l'instant, les noms d'hôtes 'slackware.bernadette' et 'freebsd.bernadette'
ne correspondent à rien dans notre réseau local. Dans un premier temps, nous
pouvons les ajouter à '/etc/hosts' pour y accéder à partir de la machine
locale.

--8<---------- /etc/hosts ----------------------------------------------------
127.0.0.1   localhost.localdomain localhost
192.168.2.3 slackware.bernadette.microlinux.montpezat slackware.bernadette
192.168.2.3 freebsd.bernadette.microlinux.montpezat freebsd.bernadette
--8<--------------------------------------------------------------------------

  > Le fichier '/etc/hosts' permet en quelque sorte de "court-circuiter"
    localement le DNS.

Tester les deux sites directement sur le serveur :

  # links http://slackware.bernadette 
  # links http://freebsd.bernadette 

Si l'on compte rendre ces hôtes virtuels accessibles à toutes les machines du
réseau local, il faudra ajouter les enregistrements A respectifs ("A records")
dans la configuration de BIND. En l'occurrence :

--8<---------- /var/named/zone.microlinux.montpezat --------------------------
...
bernadette               IN A 192.168.2.3
slackware.bernadette     IN A 192.168.2.3
freebsd.bernadette       IN A 192.168.2.3
...
--8<--------------------------------------------------------------------------

  > Ne pas oublier d'incrémenter le numéro de série du fichier zone et de
    redémarrer BIND.


Utiliser les scripts CGI avec les hôtes virtuels
------------------------------------------------

Créer un répertoire 'cgi-bin' au même niveau que 'htdocs', comme ceci :

  # tree -d /var/www/vhosts/default/
  /var/www/vhosts/default/
  |-- cgi-bin
  `-- htdocs

  2 directories

Copier le script 'test-cgi' dans ce répertoire :

  # cp -v /var/www/cgi-bin/test-cgi default/cgi-bin/
  « /var/www/cgi-bin/test-cgi » -> « default/cgi-bin/test-cgi »

Ensuite, ajouter une ligne dans la stance correspondante de
'/etc/httpd/extra/httpd-vhosts.conf' :

--8<---------- /etc/httpd/extra/httpd-vhosts.conf ----------------------------
...
<VirtualHost *:80>
    ServerAdmin info@microlinux.fr
    DocumentRoot "/srv/httpd/vhosts/default/htdocs"
    ServerName bernadette.microlinux.montpezat
    ServerAlias bernadette
    ScriptAlias /cgi-bin/ /srv/httpd/vhosts/default/cgi-bin/     --> ajouter
    ErrorLog "/var/log/httpd/default-error_log"
    CustomLog "/var/log/httpd/default-access_log" common
</VirtualHost>
...
--8<--------------------------------------------------------------------------

Redémarrer Apache et ouvrir la page suivante :

  # links http://bernadette/cgi-bin/test-cgi


Héberger des sites dynamiques avec PHP
--------------------------------------

Activer le module PHP dans '/etc/httpd/httpd.conf' :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
# Uncomment the following line to enable PHP:
#
Include /etc/httpd/mod_php.conf
...
--8<--------------------------------------------------------------------------

La directive 'DirectoryIndex' définit le fichier qui sera affiché lorsqu'un
répertoire est requis. On ajoutera les fichiers 'index.php', et on pourra
également compléter par 'index.htm', une extension que l'on rencontre rarement,
mais qui existe :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
<IfModule dir_module>
    DirectoryIndex index.html index.htm index.php
</IfModule>
...
--8<--------------------------------------------------------------------------

Redémarrer Apache pour prendre en compte les modifications.

Ajouter une section pour afficher les infos PHP :

  # cd /var/www/vhosts
  # mkdir phpinfo/htdocs

Dans ce répertoire, éditer un fichier 'index.php' comme ceci :

--8<---------- index.php -----------------------------------------------------
<?php
echo phpinfo();
?>
--8<--------------------------------------------------------------------------

Régler les droits d'accès :

  # chown -R apache:apache /var/www/vhosts/phpinfo

Créer un hôte virtuel 'phpinfo.bernadette' (cf. ci-dessus) et afficher la page
'index.php' dans un navigateur.

Le fichier '/etc/httpd/php.ini' contient la configuration de PHP. On peut
commencer par définir le fuseau horaire du serveur, nécessaire pour le bon
fonctionnement de certaines applications :

--8<---------- /etc/httpd/php.ini --------------------------------------------
[Date]
; Defines the default timezone used by the date functions
; http://php.net/date.timezone
date.timezone = Europe/Paris      <-- décommenter et définir le fuseau horaire
--8<--------------------------------------------------------------------------

Redémarrer Apache et vérifier les donnés correspondantes dans la page qui
affiche les infos PHP.


Utiliser MySQL à partir de PHP
------------------------------

Voir le MySQL-HOWTO et le SQL-HOWTO pour le serveur de bases de données. Si
MySQL est installé sur la machine, il est utilisable à partir de PHP sans autre
configuration.


Le protocole HTTPS
------------------

Le protocole HTTP (Hypertext Transfer Protocol) transmet les données entre le
serveur et le navigateur "en clair". Les données personnelles, mots de passe et
autres numéros de Carte Bleue sont donc interceptables.

Pour résoudre ce problème, on utilisera le protocole HTTPS, qui ajoute une
couche de cryptage SSL (Secure Sockets Layer) au protocole HTTP.

Le transfert crypté des données ne constitue qu'un aspect dans l'établissement
d'une connexion sécurisé. L'autre aspect tout aussi important, c'est que
l'utilisateur doit être sûr de communiquer avec la bonne personne. Autrement
dit, votre numéro de Carte Bleue a beau être transmis de façon sécurisée,
encore faut-il que la plateforme de paiement ne soit pas située sur un serveur
géré par la mafia albanaise. 

Pour savoir si l'on a bien affaire au bon interlocuteur, on utilisera un
certificat. Cette véritable carte d'identité électronique contient non
seulement la clé publique du serveur pour crypter les transmissions, mais
également des renseignements sur le site ainsi que la signature de l'autorité
de certification. Malheureusement, les certificats de serveurs sont assez
chers, et la procédure pour les obtenir n'est pas tout à fait triviale.

La bonne nouvelle, c'est que rien ne nous empêche de fabriquer nous-mêmes notre
certificat auto-signé. Cette astuce nous permettra de mettre en place
gratuitement notre propre hébergement HTTPS. 

Le hic, c'est que les navigateurs courants comme Firefox ou Internet Explorer
n'acceptent que les certificats émanant d'autorités reconnues comme Verisign.
L'utilisateur qui se connectera à notre site HTTPS auto-certifié se retrouvera
confronté à un avertissement concernant l'identité du site, et c'est à lui de
décider s'il veut "confirmer une exception de sécurité". 

Enfin, le protocole HTTPS utilise le port 443. Il faut donc songer avant toute
chose à ouvrir ce port dans le pare-feu.

Dans l'exemple ci-dessous, nous allons configurer un hébergement HTTPS local :

  * https://secure.bernadette.microlinux.montpezat


Générer un certificat auto-signé
--------------------------------

Générer une clé privée :

  # openssl genrsa -des3 -out server.key 1024
  Generating RSA private key, 1024 bit long modulus
  ...............++++++
  ..............................................++++++
  e is 65537 (0x10001)
  Enter pass phrase for server.key: ********
  Verifying - Enter pass phrase for server.key: ********

Générer un fichier CSR ("Certificate Signing Request"). Faites très attention
ici. Contrairement à ce que le dialogue de saisie peut laisser entendre,
l'entrée "Common Name" doit correspondre EXACTEMENT à l'URL du site sécurisé.
Si vous comptez héberger un site d'entreprise dont la partie sécurisée se situe
à l'adresse http://gestion.mon-entreprise.com, l'entrée "Common Name" sera donc
'gestion.mon-entreprise.com'.

  # openssl req -new -key server.key -out server.csr
  Enter pass phrase for server.key: ********
  You are about to be asked to enter information that will be incorporated
  into your certificate request.
  What you are about to enter is what is called a Distinguished Name or a DN.
  There are quite a few fields but you can leave some blank
  For some fields there will be a default value,
  If you enter '.', the field will be left blank.
  -----
  Country Name (2 letter code) [AU]:FR
  State or Province Name (full name) [Some-State]:Gard
  Locality Name (eg, city) []:Montpezat
  Organization Name (eg, company) [Internet Widgits Pty Ltd]:Microlinux
  Organizational Unit Name (eg, section) []: [Entrée]
  Common Name (e.g. server FQDN or YOUR name) []:secure.bernadette.microlinux.montpezat
  Email Address []:info@microlinux.fr

  Please enter the following 'extra' attributes
  to be sent with your certificate request
  A challenge password []: [Entrée]
  An optional company name []: [Entrée]

Chaque fois que vous comptez utiliser votre clé, vous devez saisir le mot de
passe ("passphrase") de la clé. Ce n'est pas très commode de répéter cette
opération à chaque démarrage d'Apache. On va donc supprimer le mot de passe de
la clé :

  # cp server.key server.key.orig
  # openssl rsa -in server.key.orig -out server.key
  Enter pass phrase for server.key.orig:
  writing RSA key

Signons nous-mêmes notre certificat :

  # openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt
  Signature ok
  subject=/C=FR/ST=Gard/L=Montpezat/O=Microlinux
          /CN=bernadette.microlinux.montpezat
          /emailAddress=info@microlinux.fr
  Getting Private key

  /!\ La durée par défaut d'un certificat n'est que de 30 jours. Puisque nous
  sommes maîtres à bord, profitons-en allègrement et établissons un certificat
  d'une durée de dix ans en utilisant l'option '-days 3650'.

Installer la clé privée et le certificat : 

  # cp -v server.{crt,key} /etc/httpd/
  « server.crt » -> « /etc/httpd/server.crt »
  « server.key » -> « /etc/httpd/server.key »

La clé privée ne doit pas être lue par n'importe qui :

  # chown apache:apache /etc/httpd/server.key 
  # chmod 0400 /etc/httpd/server.key
  # ls -l /etc/httpd/server.*
  -rw-r--r-- 1 root   root   981 août  23 10:04 /etc/httpd/server.crt
  -r-------- 1 apache apache 887 août  23 10:04 /etc/httpd/server.key


Configurer Apache et SSL
------------------------

Notre hébergement HTTPS sera rangé en-dessous de
'/var/www/vhosts/secure/htdocs'. Il faut donc créer cette arborescence pour
avoir quelque chose qui ressemble à ceci :

  # tree /var/www/vhosts/secure/
  /var/www/vhosts/secure/
  `-- htdocs
      `-- index.html

  1 directory, 1 file

  # cat /var/www/vhosts/secure/htdocs/index.html 
  <html><body><h1>HTTPS works!</h1></body></html>

Éditer le fichier '/etc/httpd/extra/httpd-ssl.conf' :

--8<---------- /etc/httpd/extra/httpd-ssl.conf -------------------------------
...
<VirtualHost 192.168.2.4:443>

#   General setup for the virtual host
DocumentRoot "/srv/httpd/vhosts/secure/htdocs"
ServerName secure.bernadette.microlinux.montpezat
ServerAlias secure.bernadette
ServerAdmin info@microlinux.fr
ErrorLog "/var/log/httpd/secure-error_log"
TransferLog "/var/log/httpd/secure-access_log"

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on
...
</VirtualHost>
--8<--------------------------------------------------------------------------

Activer SSL dans la configuration d'Apache :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
LoadModule socache_shmcb_module lib64/httpd/modules/mod_socache_shmcb.so
...
LoadModule ssl_module lib64/httpd/modules/mod_ssl.so
...
# Secure (SSL/TLS) connections
Include /etc/httpd/extra/httpd-ssl.conf
...
--8<--------------------------------------------------------------------------

  > Faire une recherche sur la chaîne de caractères "ssl" pour éditer le
    fichier.

Redémarrer Apache :

  # /etc/rc.d/rc.httpd restart

Ouvrir notre site sécurisé :

  # links https://secure.bernadette


Plusieurs hébergements SSL sur un même serveur
----------------------------------------------

Générer un certificat à part et le ranger dans '/etc/httpd'. Exemple :

  # ls -l /etc/httpd/*.{key,crt}
  -rw-r--r-- 1 root   root   952 août  23 12:48 /etc/httpd/scholae.crt
  -r-------- 1 apache apache 887 août  23 12:48 /etc/httpd/scholae.key
  -rw-r--r-- 1 root   root   952 août  27 16:02 /etc/httpd/scholae-webmail.crt
  -r-------- 1 apache apache 887 août  27 16:02 /etc/httpd/scholae-webmail.key

Ajouter une directive dans '/etc/httpd/extra/httpd-ssl.conf et créer un
deuxième hôte virtuel en se basant sur le premier comme modèle. Penser à
renseigner l'emplacement du nouveau certificat :

--8<---------- /etc/httpd/extra/httpd-ssl.conf -------------------------------
...
Listen 443

SSLStrictSNIVHostCheck off
...
<VirtualHost adresse_ip:443>
DocumentRoot "/srv/httpd/vhosts/scholae-secure/htdocs"
ServerName www.scholae.fr:443
...
SSLCertificateFile "/etc/httpd/scholae.crt"
SSLCertificateKeyFile "/etc/httpd/scholae.crt"
...
</VirtualHost>

<VirtualHost adresse_ip:443>
DocumentRoot "/srv/httpd/vhosts/scholae-webmail/htdocs"
ServerName mail.scholae.fr:443
...
SSLCertificateFile "/etc/httpd/scholae-webmail.crt"
SSLCertificateKeyFile "/etc/httpd/scholae-webmail.crt"
...
</VirtualHost>
--8<--------------------------------------------------------------------------

Pour être sûr que personne ne se connecte en utilisant le port 80, on peut
rediriger ces requêtes ailleurs. Exemple :

--8<---------- /etc/httpd/extra/httpd-vhosts.conf ----------------------------
...
# mail.scholae.fr
<VirtualHost *:80>
    ServerAdmin info@microlinux.fr
    DocumentRoot "/srv/httpd/vhosts/default/htdocs"
    ServerName mail.scholae.fr
    ErrorLog "/var/log/httpd/default-error_log"
    CustomLog "/var/log/httpd/default-access_log" common
</VirtualHost>
...
--8<--------------------------------------------------------------------------

Il ne reste qu'à redémarrer Apache.


------------------------------------------------------------------------------
# vim: syntax=txt
# vim: set encoding=latin1
